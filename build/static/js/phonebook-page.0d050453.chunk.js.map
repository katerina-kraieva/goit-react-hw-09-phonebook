{"version":3,"sources":["Components/ContactForm/ContactForm.module.css","Components/Filter/Filter.module.css","Components/ContactList/ContactList.module.css","Components/ContactList/fade.module.css","redux/contacts/contacts-operations.js","redux/contacts/contacts-selectors.js","Components/ContactForm/ContactForm.jsx","Components/Filter/Filter.jsx","Components/ContactList/ContactList.jsx","views/PhoneBookPage/PhoneBookPage.js"],"names":["module","exports","contactsOperations","fetchContacts","dispatch","a","fetchContactsRequest","axios","get","then","data","fetchContactsSuccess","catch","error","fetchContactsError","massage","addContact","nam","tel","contact","name","number","addContactsRequest","post","addContactsSuccess","addContactsError","deleteContacts","Id","deleteContactsRequest","console","log","delete","deleteContactsSuccess","deleteContactsError","getContacts","state","contacts","getFilter","filter","contactsSelector","getLoading","loading","getError","getVisibleContacts","createSelector","normalizedFilter","toLowerCase","includes","ContactForm","handleChangeName","e","setState","currentTarget","value","handleChangeNumber","handleSubmit","preventDefault","trim","toast","props","find","onSubmit","this","nameId","shortid","generate","telId","className","s","form","htmlFor","input","id","type","onChange","button","Component","connect","Filter","useDispatch","useSelector","findId","label","changeFilter","target","ContactList","items","TransitionGroup","component","list","map","item","CSSTransition","timeout","classNames","PhoneList","onClick","styles","h","textAlign","color","PhoneBookPage","useEffect","setTimeout","clearError","Container","maxWidth","in","appear","unmountOnExit","style","Box","m","height","width"],"mappings":"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","file":"static/js/phonebook-page.0d050453.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"ContactForm_form__3L-Mq\",\"input\":\"ContactForm_input__2lE3h\",\"button\":\"ContactForm_button__PoBtQ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"input\":\"Filter_input__1vw22\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"ContactList_list__2LCl8\",\"item\":\"ContactList_item__Wadho\",\"button\":\"ContactList_button__1r9c0\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"enter\":\"fade_enter__3Gumq\",\"enterActive\":\"fade_enterActive__31mDL\",\"exit\":\"fade_exit__9lBbg\",\"exitActive\":\"fade_exitActive__S6khZ\"};","import axios from 'axios';\r\nimport {\r\n  addContactsRequest,\r\n  addContactsSuccess,\r\n  addContactsError,\r\n  fetchContactsRequest,\r\n  fetchContactsSuccess,\r\n  fetchContactsError,\r\n  deleteContactsRequest,\r\n  deleteContactsSuccess,\r\n  deleteContactsError,\r\n} from './contacts-action';\r\n\r\n// axios.defaults.baseURL = 'https://goit-phonebook-api.herokuapp.com/';\r\n\r\nexport const fetchContacts = () => async dispatch => {\r\n  dispatch(fetchContactsRequest());\r\n\r\n  axios\r\n    .get('/contacts')\r\n    .then(({ data }) => dispatch(fetchContactsSuccess(data)))\r\n    .catch(error => dispatch(fetchContactsError(error.massage)));\r\n};\r\n\r\nexport const addContact = (nam, tel) => dispatch => {\r\n  const contact = {\r\n    name: nam,\r\n    number: tel,\r\n  };\r\n\r\n  dispatch(addContactsRequest());\r\n\r\n  axios\r\n    .post('/contacts', contact)\r\n    .then(({ data }) => dispatch(addContactsSuccess(data)))\r\n    .catch(error => dispatch(addContactsError(error.massage)));\r\n};\r\n\r\nexport const deleteContacts = Id => dispatch => {\r\n  dispatch(deleteContactsRequest());\r\n  console.log(Id);\r\n  axios\r\n    .delete(`/contacts/${Id}`)\r\n    .then(() => dispatch(deleteContactsSuccess(Id)))\r\n    .catch(error => dispatch(deleteContactsError(error.massage)));\r\n};\r\nconst contactsOperations = { fetchContacts, addContact, deleteContacts };\r\n\r\nexport default contactsOperations;","import { createSelector } from '@reduxjs/toolkit';\r\n\r\nconst getLoading = state => state.contacts.loading;\r\nconst getError = state => state.contacts.error;\r\n\r\nconst getContacts = state => state.contacts.contacts;\r\n\r\nconst getFilter = state => state.contacts.filter;\r\n\r\nconst getVisibleContacts = createSelector(\r\n  [getContacts, getFilter],\r\n  (contacts, filter) => {\r\n    const normalizedFilter = filter.toLowerCase();\r\n    return contacts.filter(contact =>\r\n      contact.name.toLowerCase().includes(normalizedFilter),\r\n    );\r\n  },\r\n);\r\n\r\nconst contactsSelector = {\r\n  getLoading,\r\n  getError,\r\n  getContacts,\r\n  getFilter,\r\n  getVisibleContacts,\r\n};\r\n\r\nexport default contactsSelector;","import React, { Component } from 'react';\r\nimport shortid from 'shortid';\r\nimport { toast } from 'react-toastify';\r\nimport { connect } from 'react-redux';\r\nimport { contactsOperations, contactsSelector } from '../../redux/contacts';\r\n// import contactsOperations from '../../redux/contacts/contacts-operations';\r\n// import contactsSelector from '../../redux/contacts/contacts-selectors';\r\nimport s from './ContactForm.module.css';\r\n\r\nclass ContactForm extends Component {\r\n  state = {\r\n    name: '',\r\n    number: '',\r\n  };\r\n\r\n  // componentDidMount() {\r\n  //   this.props.fetchContacts();\r\n  // }\r\n\r\n  handleChangeName = e => {\r\n    this.setState({\r\n      name: e.currentTarget.value,\r\n    });\r\n  };\r\n\r\n  handleChangeNumber = e => {\r\n    this.setState({\r\n      number: e.currentTarget.value,\r\n    });\r\n  };\r\n\r\n  handleSubmit = e => {\r\n    e.preventDefault();\r\n    const { name, number } = this.state;\r\n    \r\n    if (name.trim() === '' || number.trim() === '') {\r\n      console.log('empty name and number');\r\n      toast.error(`The name and number fields are empty!`);\r\n      return;\r\n    }\r\n   else if (this.props.contacts.find(contact => contact.name.toLowerCase() === name.toLowerCase())) {\r\n      console.log(name);\r\n      toast.error(`${name} is already in your contact list`);\r\n      return;\r\n    }\r\n     this.props.onSubmit(name, number);\r\n    this.setState({ name: '', number: '' });\r\n    \r\n  };\r\n\r\n  render() {\r\n    const { name, number } = this.state;\r\n    const nameId = shortid.generate();\r\n    const telId = shortid.generate();\r\n\r\n    return (\r\n      <>\r\n        <form className={s.form} onSubmit={this.handleSubmit}>\r\n        <label htmlFor={nameId}> Name </label>\r\n        <input\r\n          className={s.input}\r\n          id={nameId}\r\n          type=\"text\"\r\n          value={name}\r\n          onChange={this.handleChangeName}\r\n        />\r\n        <label htmlFor={telId}> Number </label>\r\n        <input\r\n          className={s.input}\r\n          id={telId}\r\n          type=\"text\"\r\n          value={number}\r\n          onChange={this.handleChangeNumber}\r\n        />\r\n        <button className={s.button} type=\"submit\">\r\n          Add contact\r\n        </button>\r\n        </form>\r\n        </>\r\n      \r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n  contacts: contactsSelector.getContacts(state),\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  // fetchContacts: () => dispatch(contactsOperations.fetchContacts()),\r\n  onSubmit: (nam, tel) => dispatch(contactsOperations.addContact(nam, tel)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactForm);","import shortid from 'shortid';\r\n// import { connect } from 'react-redux';\r\n// import contactsActions from '../../redux/contacts/contacts-action';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { changeFilter, contactsSelector } from '../../redux/contacts';\r\n\r\nimport s from './Filter.module.css';\r\n\r\nexport default function Filter() {\r\n  const dispatch = useDispatch();\r\n\r\n  const value = useSelector(contactsSelector.getFilter);\r\n  const findId = shortid.generate();\r\n  const onChange = e => dispatch(changeFilter(e.target.value));\r\n\r\n  return (\r\n    <div>\r\n      <label htmlFor={findId} className={s.label}>Find contacts by name</label>\r\n      <input className={s.input} id={findId} type=\"text\" value={value} onChange={onChange} />\r\n    </div>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport { CSSTransition, TransitionGroup } from 'react-transition-group';\r\n// import { connect } from 'react-redux';\r\n// import contactsActions from '../../redux/contacts/contacts-action';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { contactsOperations, contactsSelector } from '../../redux/contacts';\r\nimport s from './ContactList.module.css';\r\nimport PhoneList from './fade.module.css';\r\n\r\nexport default function ContactList() {\r\n  const dispatch = useDispatch();\r\n\r\n  const items = useSelector(contactsSelector.getVisibleContacts);\r\n  const onDeleteNumber = id => dispatch(contactsOperations.deleteContacts(id));\r\n\r\n\r\n  return (\r\n    <TransitionGroup component=\"ol\" className={s.list}>\r\n      {items.map(item => (\r\n        <CSSTransition key={item.id} timeout={250} classNames={PhoneList}>\r\n          <li key={item.id} className={s.item}>\r\n            <span>\r\n              <b>{item.name}:</b> {item.number}\r\n            </span>\r\n            <button className={s.button} type=\"button\" onClick={() => onDeleteNumber(item.id)}>\r\n              Delete\r\n            </button>\r\n          </li>\r\n        </CSSTransition>\r\n      ))}\r\n    </TransitionGroup>\r\n  );\r\n}\r\n\r\n// const getVisibleContacts = (contacts, filter) => {\r\n//   const normalizedFilter = filter.toLowerCase();\r\n//   return contacts.filter(contact => contact.name.toLowerCase().includes(normalizedFilter));\r\n// };\r\n\r\n// const mapStateToProps = state => ({\r\n//   items: contactsSelector.getVisibleContacts(state),\r\n// });\r\n\r\n// const mapDispatchToProps = dispatch => ({\r\n//   onDeleteNumber: id => dispatch(contactsOperations.deleteContacts(id)),\r\n// });\r\n\r\n// export default connect(mapStateToProps, mapDispatchToProps)(ContactList);","import React, { useEffect } from 'react';\r\nimport { Container, Box } from '@material-ui/core';\r\n// import { connect } from 'react-redux';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { CSSTransition } from 'react-transition-group';\r\nimport { toast } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nimport Loader from 'react-loader-spinner';\r\nimport 'react-loader-spinner/dist/loader/css/react-spinner-loader.css';\r\nimport {\r\n  clearError,\r\n  contactsSelector,\r\n  contactsOperations,\r\n} from '../../redux/contacts';\r\n// import Container from 'components/Container';\r\nimport ContactForm from '../../Components/ContactForm/ContactForm';\r\nimport Filter from '../../Components/Filter/Filter';\r\nimport ContactList from '../../Components/ContactList/ContactList';\r\n\r\nconst styles = {\r\n  h: {\r\n    textAlign: 'center',\r\n    color: 'rgb(31, 54, 77)',\r\n  }\r\n}\r\n\r\nexport default function PhoneBookPage() {\r\n  const dispatch = useDispatch();\r\n  const error = useSelector(contactsSelector.getError);\r\n  const loading = useSelector(contactsSelector.getError);\r\n\r\n  useEffect(() => dispatch(contactsOperations.fetchContacts()), [dispatch]);\r\n\r\n  useEffect(() => {\r\n    error && toast.error('No Network');\r\n    setTimeout(dispatch(clearError()), 500);\r\n  }, [error, dispatch]);\r\n\r\n  return (\r\n      <>\r\n        {/* <Grid container direction=\"row\" justify=\"center\" alignItems=\"baseline\"> */}\r\n          <Container maxWidth=\"sm\">\r\n            <CSSTransition\r\n              in={true}\r\n              appear={true}\r\n              timeout={250}\r\n              classNames=\"Logo\"\r\n              unmountOnExit\r\n            >\r\n            <h1 style={ styles.h}>Phonebook</h1>\r\n            </CSSTransition>\r\n            <ContactForm />\r\n\r\n            <Box m={1}>\r\n              <Filter />\r\n            </Box>\r\n          </Container>\r\n          <Container maxWidth=\"sm\">\r\n            {loading && (\r\n              <Loader type=\"Rings\" color=\"rgb(236, 8, 38)\" height={200} width={200} />\r\n            )}\r\n            <ContactList />\r\n          </Container>\r\n        {/* </Grid> */}\r\n      </>\r\n  );\r\n}\r\n\r\n\r\n"],"sourceRoot":""}